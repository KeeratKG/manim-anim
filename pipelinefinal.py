from manimlib.imports import *

class Pipeline(Scene):
    def construct(self):
        c1=TextMobject("Data Sample")
        c2=TextMobject("Learned Metric")
        c3=TextMobject("Learned Predictor")
        text=TextMobject("Ordinary Learning Pipeline")
        label=TextMobject("Underlying distribution", color=WHITE)
        label.bg=BackgroundRectangle(label, color=WHITE, fill_opacity=0)
        label_group=VGroup(label.bg, label)
        label_group.to_edge(UP)
        arrow=Arrow(UP, 2*DOWN, color=WHITE)
        arrow.next_to(label, DOWN, buff=0.01)
        c1.next_to(arrow, RIGHT, buff=0.05)
        label2=TextMobject("Standard Predictive Algorithm")
        label2.bg=BackgroundRectangle(label2, color=WHITE, fill_opacity=0)
        label2_group=VGroup(label2.bg, label2)
        arrow2=Arrow(UP, 2*DOWN, color=WHITE)
        arrow2.next_to(label2, DOWN, buff=0.01)
        c3.next_to(arrow2, RIGHT, buff=0.05)
        label3=TextMobject("Prediction")
        label3.bg=BackgroundRectangle(label3, color=WHITE, fill_opacity=0)
        label3_group=VGroup(label3.bg, label3)
        label3_group.to_edge(DOWN)

        self.play(FadeIn(text))
        self.wait(2)
        self.play(FadeOut(text))
        self.wait(2)
        self.add(label_group)
        self.play(GrowArrow(arrow))
        self.add(c1)
        self.wait(1)
        self.add(label2_group)
        self.play(GrowArrow(arrow2))
        self.add(c3)
        self.wait(1)
        self.add(label3_group)
        self.wait(2)
        self.remove(label_group, label2_group, label3_group, arrow, arrow2, c1, c3)

        text1=TextMobject("Metric Learning Pipeline")
        labbel=TextMobject("Underlying distribution", color=WHITE)
        labbel.bg=BackgroundRectangle(labbel, color=WHITE, fill_opacity=0)
        labbel_group=VGroup(labbel.bg, labbel)
        labbel_group.to_edge(UP)
        arroww=Arrow(UP, 0.65*DOWN, color=WHITE)
        arroww.next_to(labbel, DOWN, buff=0.01)
        c1.next_to(arroww, RIGHT, buff=0.05)
        labbel2=TextMobject("Metric learning Algorithm")
        labbel2.bg=BackgroundRectangle(labbel2, color=WHITE, fill_opacity=0)
        labbel2_group=VGroup(labbel2.bg, labbel2)
        labbel2_group.shift(np.array([0, 1.5, 0]))
        arroww2=Arrow(UP, 1.75*DOWN, color=WHITE)
        arroww2.next_to(labbel2, DOWN, buff=0.01)
        c2.next_to(arroww2, RIGHT, buff=0.05)
        labbel4=TextMobject("Metric-based Algorithm")
        labbel4.bg=BackgroundRectangle(labbel4, color=WHITE, fill_opacity=0)
        labbel4_group=VGroup(labbel4.bg, labbel4)
        labbel4_group.shift(np.array([0, -1.5, 0]))
        arroww4=Arrow(UP, 0.65*DOWN, color=WHITE)
        arroww4.next_to(labbel4, DOWN, buff=0.01)
        c3.next_to(arroww4, RIGHT, buff=0.05)
        labbel3=TextMobject("Prediction")
        labbel3.bg=BackgroundRectangle(labbel3, color=WHITE, fill_opacity=0)
        labbel3_group=VGroup(labbel3.bg, labbel3)
        labbel3_group.to_edge(DOWN)

        self.play(FadeIn(text1))
        self.wait(2)
        self.play(FadeOut(text1))
        self.wait(2)
        self.add(labbel_group)
        self.play(GrowArrow(arroww))
        self.add(c1)
        self.wait(1)
        self.add(labbel2_group)
        self.play(GrowArrow(arroww2))
        self.add(c2)
        self.wait(1)
        self.add(labbel4_group)
        self.play(GrowArrow(arroww4))
        self.add(c3)
        self.wait(1)
        self.add(labbel3_group)
        self.wait(2)
        self.remove(labbel_group, labbel2_group, labbel3_group, labbel4_group)